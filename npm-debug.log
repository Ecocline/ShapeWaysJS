0 info it worked if it ends with ok
1 verbose cli [ '/opt/local/bin/node', '/opt/local/bin/npm', 'install', 'png' ]
2 info using npm@1.1.70
3 info using node@v0.8.16
4 verbose read json /Users/mikolalysenko/GitHub/ShapeWaysJS/package.json
5 verbose read json /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/node-expat/package.json
6 verbose read json /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/request/package.json
7 verbose read json /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/underscore/package.json
8 verbose from cache /Users/mikolalysenko/GitHub/ShapeWaysJS/package.json
9 verbose readDependencies using package.json deps
10 verbose cache add [ 'png@*', null ]
11 silly cache add name=undefined spec="png@*" args=["png@*",null]
12 verbose parsed url { pathname: 'png@*', path: 'png@*', href: 'png@*' }
13 silly cache add name="png" spec="*" args=["png","*"]
14 verbose parsed url { pathname: '*', path: '*', href: '*' }
15 verbose addNamed [ 'png', '*' ]
16 verbose addNamed [ null, '' ]
17 silly lockFile 97de40b4-png png@*
18 verbose lock png@* /Users/mikolalysenko/.npm/97de40b4-png.lock
19 silly addNameRange { name: 'png', range: '', hasData: false }
20 verbose url raw png
21 verbose url resolving [ 'https://registry.npmjs.org/', './png' ]
22 verbose url resolved https://registry.npmjs.org/png
23 info trying registry request attempt 1 at 11:35:23
24 verbose etag "7JZSPBHXGL1ZW0JBMSODNSZ7D"
25 http GET https://registry.npmjs.org/png
26 http 304 https://registry.npmjs.org/png
27 silly registry.get cb [ 304,
27 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B)',
27 silly registry.get     etag: '"7JZSPBHXGL1ZW0JBMSODNSZ7D"',
27 silly registry.get     date: 'Tue, 15 Jan 2013 17:33:47 GMT',
27 silly registry.get     'content-length': '0' } ]
28 verbose etag png from cache
29 silly addNameRange number 2 { name: 'png', range: '', hasData: true }
30 silly addNameRange versions [ 'png',
30 silly addNameRange   [ '1.0.0',
30 silly addNameRange     '1.0.1',
30 silly addNameRange     '1.0.2',
30 silly addNameRange     '1.0.3',
30 silly addNameRange     '2.0.0',
30 silly addNameRange     '2.0.1',
30 silly addNameRange     '2.1.0',
30 silly addNameRange     '2.1.1' ] ]
31 verbose addNamed [ 'png', '2.1.1' ]
32 verbose addNamed [ '2.1.1', '2.1.1' ]
33 silly lockFile cbe26b45-png-2-1-1 png@2.1.1
34 verbose lock png@2.1.1 /Users/mikolalysenko/.npm/cbe26b45-png-2-1-1.lock
35 verbose read json /Users/mikolalysenko/.npm/png/2.1.1/package/package.json
36 silly lockFile cbe26b45-png-2-1-1 png@2.1.1
37 silly lockFile 97de40b4-png png@*
38 silly resolved [ { name: 'png',
38 silly resolved     version: '2.1.1',
38 silly resolved     main: './build/Release/png',
38 silly resolved     description: 'A C++ module for node-js that converts an RGB and RGBA buffers to PNG images (in memory).',
38 silly resolved     keywords: [ 'png', 'rgb', 'rgba', 'image', 'picture', 'encode' ],
38 silly resolved     author:
38 silly resolved      { name: 'Peteris Krumins',
38 silly resolved        email: 'peteris.krumins@gmail.com',
38 silly resolved        url: 'http://www.catonmat.net' },
38 silly resolved     license: { type: 'MIT' },
38 silly resolved     repository: { type: 'git', url: 'http://github.com/pkrumins/node-png.git' },
38 silly resolved     directories: { examples: 'examples', src: 'src' },
38 silly resolved     engines: { node: '>=0.6.0' },
38 silly resolved     scripts: { install: 'node-waf configure build' },
38 silly resolved     readme: 'This is a node.js module, writen in C++, that uses libpng to produce a PNG\r\nimage (in memory) from RGB or RGBA buffers.\r\n\r\nIt was written by Peteris Krumins (peter@catonmat.net).\r\nHis blog is at http://www.catonmat.net  --  good coders code, great reuse.\r\n\r\n------------------------------------------------------------------------------\r\n\r\nThe module exports three objects: `Png`, `FixedPngStack` and `DynamicPngStack`.\r\n\r\nThe `Png` object is for creating PNG images from an RGB or RGBA buffer.\r\nThe `FixedPngStack` is for joining a number of PNGs together (stacking them\r\ntogether) on a transparent blackground.\r\nThe `DynamicPngStack` is for joining a number of PNGs together in the most\r\nspace efficient way (so that the canvas border matches the leftmost upper corner\r\nof some PNG and the rightmost bottom corner of some PNG).\r\n\r\n\r\nPng\r\n---\r\n\r\nThe `Png` object takes 4 arguments in its constructor:\r\n\r\n    var png = new Png(buffer, width, height, buffer_type);\r\n\r\nThe first argument, `buffer`, is a node.js `Buffer` filled with RGB(A) values.\r\nThe second argument is integer width of the image.\r\nThe third argument is integer height of the image.\r\nThe fourth argument is \'rgb\', \'bgr\', \'rgba or \'bgra\'. Defaults to \'rgb\'.\r\n\r\nThe constructed `png` object has the `encode` method that\'s asynchronous in nature.\r\nYou give it a callback and it will call your function with a node.js Buffer object\r\ncontaining the encoded PNG data when it\'s done:\r\n\r\n    png.encode(function (png_image) {\r\n        // ...\r\n    });\r\n\r\nThe constructed `png` object also has `encodeSync` method that does the encoding\r\nsynchronously and returns Buffer with PNG image data:\r\n\r\n    var png_image = png.encode();\r\n\r\nYou can either send the png_image to the browser, or write to a file, or\r\ndo something else with it. See `examples/` directory for some examples.\r\n\r\n\r\nFixedPngStack\r\n-------------\r\n\r\nThe `FixedPngStack` object takes 3 arguments in its constructor:\r\n\r\n    var fixed_png = new FixedPngStack(width, height, buffer_type);\r\n\r\nThe first argument is integer width of the canvas image.\r\nThe second argument is integer height of the canvas image.\r\nThe third argument is \'rgb\', \'bgr\', \'rgba or \'bgra\'. Defaults to \'rgb\'.\r\n\r\nNow you can use the `push` method of `fixed_png` object to push buffers\r\nto the canvas. The `push` method takes 5 arguments:\r\n\r\n    fixed_png.push(buffer, x, y, w, h);\r\n\r\nIt pushes an RGB(A) image in `buffer` of width `w` and height `h` to the canvas\r\nposition (x, y). You can push as many buffers to canvas as you want. After\r\nthat you should call `encode` method or `encodeSync` method that will join all\r\nthe pushed RGB(A) buffers together and return a single PNG.\r\n\r\nAll the regions that did not get covered will be transparent.\r\n\r\n\r\nDynamicPngStack\r\n---------------\r\n\r\nThe `DynamicPngStack` object doesn\'t take any dimension arguments because its\r\nwidth and height is dynamically computed. To create it, do:\r\n\r\n    var dynamic_png = new DynamicPngStack(buffer_type);\r\n\r\nThe `buffer_type` again is \'rgb\', \'bgr\', \'rgba\' or \'bgra\', depending on what type\r\nof buffers you\'re gonna push to `dynamic_png`.\r\n\r\nIt provides four methods - `push`, `encode`, `encodeSync`, and `dimensions`. The\r\n`push` and `encode` methods are the same as in `FixedPngStack`. You `push` each\r\nof the RGB(A) buffers to the stack and after that you call `encode` or\r\n`encodeSync`.\r\n\r\nThe `encode` asynchronous method receives one more argument than others - it\r\nreceives the dimensions object with x, y, width and height of the dynamic PNG.\r\nSee the next paragraph for what the dimensions are.\r\n\r\nThe `dimensions` method is more interesting. It must be called only after\r\n`encode` as its values are calculated upon encoding the image. It returns an\r\nobject with `width`, `height`, `x` and `y` properties. The `width` and\r\n`height` properties show the width and the height of the final image. The `x`\r\nand `y` propreties show the position of the leftmost upper PNG.\r\n\r\nHere is an example that illustrates it. Suppose you wish to join two PNGs\r\ntogether. One with width 100x40 at position (5, 10) and the other with\r\nwidth 20x20 at position (2, 210). First you create the DynamicPngStack\r\nobject:\r\n\r\n    var dynamic_png = new DynamicPngStack();\r\n\r\nNext you push the RGB(A) buffers of the two PNGs to it:\r\n\r\n    dynamic_png.push(png1_buf, 5, 10, 100, 40);\r\n    dynamic_png.push(png2_buf, 2, 210, 20, 20);\r\n\r\nNow you can call `encode` to produce the final PNG:\r\n\r\n    var png = dynamic_png.encodeSync();\r\n\r\nNow let\'s see what the dimensions are,\r\n\r\n    var dims = dynamic_png.dimensions();\r\n\r\nSame asynchronously:\r\n\r\n    dynamic_png.encode(function (png, dims) {\r\n        // png is the PNG image (in a node.js Buffer)\r\n        // dims are its dimensions\r\n    });\r\n\r\nThe x position `dims.x` is 2 because the 2nd png is closer to the left.\r\nThe y position `dims.y` is 10 because the 1st png is closer to the top.\r\nThe width `dims.width` is 103 because the first png stretches from x=5 to\r\nx=105, but the 2nd png starts only at x=2, so the first two pixels are not\r\nnecessary and the width is 105-2=103.\r\nThe height `dims.height` is 220 because the 2nd png is located at 210 and\r\nits height is 20, so it stretches to position 230, but the first png starts\r\nat 10, so the upper 10 pixels are not necessary and height becomes 230-10= 220.\r\n\r\n\r\nHow to compile?\r\n---------------\r\n\r\nTo get the node-png module compiled, you need to have libpng and node.js\r\ninstalled. Then just run:\r\n\r\n    node-waf configure build\r\n\r\nto build node-png module. It will be called `png.node`. To use it, make sure\r\nit\'s in NODE_PATH.\r\n\r\nSee also http://github.com/pkrumins/node-jpeg module that produces JPEG images.\r\nAnd also http://github.com/pkrumins/node-gif for producing GIF images.\r\n\r\nIf you wish to stream PNGs over a websocket or xhr-multipart, you\'ll have to\r\nbase64 encode it. Use my http://github.com/pkrumins/node-base64 module to do\r\nthat.\r\n\r\n------------------------------------------------------------------------------\r\n\r\nHave fun producing PNGs!\r\n\r\n\r\nSincerely,\r\nPeteris Krumins\r\nhttp://www.catonmat.net\r\n\r\n',
38 silly resolved     readmeFilename: 'readme.txt',
38 silly resolved     _id: 'png@2.1.1',
38 silly resolved     _from: 'png@*' } ]
39 info install png@2.1.1 into /Users/mikolalysenko/GitHub/ShapeWaysJS
40 info installOne png@2.1.1
41 verbose from cache /Users/mikolalysenko/.npm/png/2.1.1/package/package.json
42 info /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png unbuild
43 verbose read json /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png/package.json
44 verbose tar unpack /Users/mikolalysenko/.npm/png/2.1.1/package.tgz
45 silly lockFile 49b1f491-Hub-ShapeWaysJS-node-modules-png /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png
46 verbose lock /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png /Users/mikolalysenko/.npm/49b1f491-Hub-ShapeWaysJS-node-modules-png.lock
47 silly gunzTarPerm modes [ '755', '644' ]
48 silly gunzTarPerm extractEntry package.json
49 silly gunzTarPerm extractEntry .npmignore
50 silly gunzTarPerm extractEntry examples/png-example-async.js
51 silly gunzTarPerm extractEntry examples/png-example.js
52 silly gunzTarPerm extractEntry examples/png-example2.js
53 silly gunzTarPerm extractEntry examples/png-example3.js
54 silly gunzTarPerm extractEntry examples/rgba-terminal.dat
55 silly gunzTarPerm extractEntry package.json~
56 silly gunzTarPerm extractEntry readme.txt
57 silly gunzTarPerm extractEntry src/fixed_png_stack.cpp
58 silly gunzTarPerm extractEntry src/buffer_compat.cpp
59 silly gunzTarPerm extractEntry src/common.cpp
60 silly gunzTarPerm extractEntry src/common.h
61 silly gunzTarPerm extractEntry src/dynamic_png_stack.cpp
62 silly gunzTarPerm extractEntry src/dynamic_png_stack.h
63 silly gunzTarPerm extractEntry src/buffer_compat.h
64 silly gunzTarPerm extractEntry src/fixed_png_stack.h
65 silly gunzTarPerm extractEntry src/module.cpp
66 silly gunzTarPerm extractEntry src/png.cpp
67 silly gunzTarPerm extractEntry src/png.h
68 silly gunzTarPerm extractEntry src/png_encoder.cpp
69 silly gunzTarPerm extractEntry src/png_encoder.h
70 silly gunzTarPerm extractEntry tests/dynamic-png-stack-async.js
71 silly gunzTarPerm extractEntry tests/dynamic-png-stack.js
72 silly gunzTarPerm extractEntry tests/fixed-png-stack-async.js
73 silly gunzTarPerm extractEntry tests/fixed-png-stack.js
74 silly gunzTarPerm extractEntry tests/push-data/11-rgba-128-386-16-10.dat
75 silly gunzTarPerm extractEntry tests/push-data/01-rgba-80-389-16-7.dat
76 silly gunzTarPerm extractEntry tests/push-data/03-rgba-80-397-32-2.dat
77 silly gunzTarPerm extractEntry tests/push-data/04-rgba-96-386-16-10.dat
78 silly gunzTarPerm extractEntry tests/push-data/05-rgba-96-397-32-2.dat
79 silly gunzTarPerm extractEntry tests/push-data/06-rgba-96-397-32-2.dat
80 silly gunzTarPerm extractEntry tests/push-data/07-rgba-112-386-16-10.dat
81 silly gunzTarPerm extractEntry tests/push-data/08-rgba-112-397-32-2.dat
82 silly gunzTarPerm extractEntry tests/push-data/09-rgba-112-389-32-7.dat
83 silly gunzTarPerm extractEntry tests/push-data/10-rgba-112-397-32-2.dat
84 silly gunzTarPerm extractEntry tests/push-data/02-rgba-96-390-16-5.dat
85 silly gunzTarPerm extractEntry tests/push-data/12-rgba-128-397-32-2.dat
86 silly gunzTarPerm extractEntry tests/push-data/13-rgba-144-386-16-10.dat
87 silly gunzTarPerm extractEntry tests/push-data/14-rgba-144-397-32-2.dat
88 silly gunzTarPerm extractEntry tests/push-data/15-rgba-144-389-16-7.dat
89 silly gunzTarPerm extractEntry tests/push-data/16-rgba-144-397-32-2.dat
90 silly gunzTarPerm extractEntry tests/push-data/17-rgba-160-393-16-6.dat
91 silly gunzTarPerm extractEntry tests/push-data/18-rgba-176-397-16-2.dat
92 silly gunzTarPerm extractEntry tests/push-data/19-rgba-160-397-32-2.dat
93 silly gunzTarPerm extractEntry tests/push-data/20-rgba-176-386-16-10.dat
94 silly gunzTarPerm extractEntry wscript
95 verbose read json /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png/package.json
96 silly lockFile 49b1f491-Hub-ShapeWaysJS-node-modules-png /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png
97 info preinstall png@2.1.1
98 verbose from cache /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png/package.json
99 verbose readDependencies using package.json deps
100 verbose from cache /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png/package.json
101 verbose readDependencies using package.json deps
102 silly resolved []
103 verbose about to build /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png
104 info build /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png
105 verbose from cache /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png/package.json
106 verbose linkStuff [ false,
106 verbose linkStuff   false,
106 verbose linkStuff   false,
106 verbose linkStuff   '/Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules' ]
107 info linkStuff png@2.1.1
108 verbose linkBins png@2.1.1
109 verbose linkMans png@2.1.1
110 verbose rebuildBundles png@2.1.1
111 info install png@2.1.1
112 verbose unsafe-perm in lifecycle true
113 silly exec sh "-c" "node-waf configure build"
114 silly sh,-c,node-waf configure build,/Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png spawning
115 info png@2.1.1 Failed to exec install script
116 info /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png unbuild
117 verbose from cache /Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules/png/package.json
118 info preuninstall png@2.1.1
119 info uninstall png@2.1.1
120 verbose true,/Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules,/Users/mikolalysenko/GitHub/ShapeWaysJS/node_modules unbuild png@2.1.1
121 info postuninstall png@2.1.1
122 error png@2.1.1 install: `node-waf configure build`
122 error `sh "-c" "node-waf configure build"` failed with 1
123 error Failed at the png@2.1.1 install script.
123 error This is most likely a problem with the png package,
123 error not with npm itself.
123 error Tell the author that this fails on your system:
123 error     node-waf configure build
123 error You can get their info via:
123 error     npm owner ls png
123 error There is likely additional logging output above.
124 error System Darwin 12.2.1
125 error command "/opt/local/bin/node" "/opt/local/bin/npm" "install" "png"
126 error cwd /Users/mikolalysenko/GitHub/ShapeWaysJS
127 error node -v v0.8.16
128 error npm -v 1.1.70
129 error code ELIFECYCLE
130 verbose exit [ 1, true ]
